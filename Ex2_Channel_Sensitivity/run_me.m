% Joint steepest descent and Jacobi based detection method for massive MIMO
% systems
% uncoded QPSK modulation

clear all
close all
clc


%load('ChannelH.mat');
%load('DSC_result.mat');%%DSC_result is generated by the experiment 1. DSC_result represents the weight matrix of NN
%load('DSC_result_1205_100.mat');
% N_c = 4;
% N_ray = 4;
seed =100;
rng(seed);
sym = 92;
M = 64;
Nt = 4; % number of antennas at User
Nr = 32; % number of antennas at Base Station (BS)
Pav = log2(M)*(log2(M)+1)/3; % average power of QPSK constellation.
fade_var = 0.5; % fade variance of Rayleigh flat channel per dimension
filenm2 = ['./input/channel/ChannelH_',num2str(sym) ,'.mat'];%generated channel matrix.

load(filenm2);
energy = sum(sum(abs(H)));
fade_chan = normrnd(0,sqrt(fade_var),Nr,Nt)+1i*normrnd(0,sqrt(fade_var),Nr,Nt);
energy = sum(sum(abs(fade_chan)));
fade_chan = H';
H1 = fade_chan';
H_inv = pinv(H1);
% filenm = ['Jacobi_H_',num2str(seed) ,'.mat'];
% save(filenm,'H','-mat');
% filenm = ['Jacobi_H_inv_',num2str(seed) ,'.mat'];
% save(filenm,'H_inv','-mat');

num_frames = 1000; % simulation runs
ber_list =[];
ber_list_MMSE = [];
ber_list_DSC = [];
ber_list_j_k1 = [];
% SNR parameters
for snr = -4 :2:20
SNR_dB = snr; % SNR per bit (dB)
SNR = 10^(0.1*SNR_dB); % SNR in linear scale
noise_var = 2*fade_var*Pav*Nt*Nr/(2*SNR*log2(M)*Nt);% noise variance per dimension
a_all = [];
dec_s_all = [];
dec_MMSE_all = [];
dec_DSC_all = [];
dec_j_k1_all = [];
tic()
C_Ber = 0; % bit errors initialization
for i1=1:num_frames
% source
a = randi([0 1],log2(M)*Nt,1);
a_all = [a_all;a];
seq = qammod(a,M,'InputType','bit');

% AWGN
noise = normrnd(0,sqrt(noise_var),Nr,1)+1i*normrnd(0,sqrt(noise_var),Nr,1);
% Channel output
%chan_op = awgn(fade_chan*seq,snr,'measured');
chan_op = fade_chan*seq+ noise;

%               RECEIVER
% initialization
G = fade_chan'*fade_chan;
A = G + 2*noise_var/Pav*eye(Nt,Nt);
b = fade_chan'*chan_op;
D = diag(diag(A));
Dinv = inv(D);
x0 = Dinv*b;
r0 = b - A*x0;

% first iteration
p0 = A*r0;
u = r0'*r0/(p0'*r0);
x1 = x0 + u*r0 + Dinv*(r0 - u*p0);
x_k1 = x1';
% other iterations: Jacobi
K = 5; % number of iterations
for k=2:K
   x1 = Dinv*((D-A)*x1 + b);     
end

dec_seq = x1'; % decoded sequence now a row vector
out_MMSE = H_inv' * chan_op;
%out_DSC =  H_DSC1' * chan_op;
dec_jacobi_k1 = qamdemod(x_k1,M,'OutputType','bit');
dec_MMSE = qamdemod(out_MMSE,M,'OutputType','bit');
%dec_DSC = qamdemod(out_DSC,M,'OutputType','bit');
dec_s = qamdemod(x1,M,'OutputType','bit');
dec_before = qamdemod(seq,M,'OutputType','bit');
% demapping to bits
dec_a = zeros(1,log2(M)*Nt);
%dec_DSC_all = [dec_DSC_all;dec_DSC];
dec_MMSE_all = [dec_MMSE_all;dec_MMSE];
dec_s_all = [dec_s_all;dec_s];
% bit errors
C_Ber = C_Ber + nnz(a-dec_a);
end

toc()
BER = biterr(a_all, dec_s_all)/length(a_all);
BER_MMSE = biterr(a_all, dec_MMSE_all)/length(a_all);
%BER_DSC = biterr(a_all, dec_DSC_all)/length(a_all);
%ber_list_DSC = [ber_list_DSC,BER_DSC];
ber_list_MMSE = [ber_list_MMSE,BER_MMSE];
ber_list = [ber_list,BER];
% Bit error rate
end
%ber_list_after = ber_list./10.92;
xxx = -4:2:20;
figure(1);
%plot(xxx,ber_list_j_k1,'--sb',xxx,ber_list,'--sb',xxx,ber_list_MMSE,'-.ok',xxx,ber_list_DSC,'-^r','linewidth',2);
plot(xxx,ber_list,'-*b',xxx,ber_list_MMSE,'-ok','linewidth',1.5);
xlabel('SNR(dB)');
ylabel('BER');
legend('Steepest Descent and Jacobi Method [16],{\it{K}}=3','MMSE with Exact Matrix Inversion');
set(gca,'FontSize',18);
set(gca,'FontName','Times New Roman');
grid on;